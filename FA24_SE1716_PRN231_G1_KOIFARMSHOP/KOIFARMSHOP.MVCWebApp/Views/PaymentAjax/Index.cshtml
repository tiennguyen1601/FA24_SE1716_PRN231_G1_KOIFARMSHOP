<div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frm", id = "frm" }))
            {
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title">Add New Payment</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="modalOrderSelect" class="control-label">Order</label>
                        <select class="form-control" asp-items="ViewBag.OrderId" id="modalOrderSelect"></select>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Customer</label>
                        <select class="form-control pe-none bg-secondary" asp-items="ViewBag.CustomerId" id="modalCustomerSelect"></select>
                    </div>
                    <div class="form-group">
                        <label for="modalMethod" class="control-label">Method</label>
                        <input id="modalMethod" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="addPayment()">Add</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            }
        </div>
    </div>
</div>

<div class="modal fade" id="paymentUpdateModal" tabindex="-1" aria-labelledby="paymentUpdateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frm", id = "frmUpdate" }))
            {
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title">Update Payment</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="updatePaymentId"/>
                    <div class="form-group">
                        <label for="updateOrderSelect" class="control-label">Order</label>
                        <select class="form-control pe-none bg-secondary" asp-items="ViewBag.OrderId" id="updateOrderSelect"></select>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Customer</label>
                        <select class="form-control pe-none bg-secondary" asp-items="ViewBag.CustomerId" id="updateCustomerSelect"></select>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Status</label>
                        <select class="form-control" asp-items="ViewBag.Status" id="updateStatusSelect"></select>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Method</label>
                        <input class="form-control pe-none bg-secondary" id="updateMethod"/>
                    </div>
                    <div class="form-group">
                        <label for="updateTransactionId" class="control-label">Transaction Id</label>
                        <input id="updateTransactionId" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="updatePayment()">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            }
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-10">
        <h3 class="display-8">Payment List</h3>
    </div>
    <div class="col-md-2 text-end">
        <button type="button" class="btn btn-primary" onclick="showModal()">
            Add
        </button>
    </div>
</div>

<button class="btn btn-primary mb-3" type="button" data-bs-toggle="collapse" data-bs-target="#searchFormCollapse" aria-expanded="false" aria-controls="searchFormCollapse">
    Search
</button>

<div class="collapse" id="searchFormCollapse">
    <div class="p-4 bg-light rounded shadow">
        <h3 class="mb-4">Payment Search</h3>
        <form id="searchForm" method="get" action="@Url.Action("Index")">
            <div class="row g-3 mb-3">
                <div class="col-md-6">
                    <label for="method" class="form-label">Payment Method</label>
                    <input type="text" class="form-control" id="method" name="method" placeholder="e.g., Credit Card" />
                </div>
                <div class="col-md-6">
                    <label for="status" class="form-label">Status</label>
                    <input type="text" class="form-control" id="status" name="status" placeholder="e.g., Completed"/>
                </div>
            </div>
            <div class="row g-3 mb-3">
                <div class="col-md-6">
                    <label for="transactionId" class="form-label">Transaction ID</label>
                    <input type="text" class="form-control" id="transactionId" name="transactionId" placeholder="Enter transaction ID"/>
                </div>
            </div>
            <div class="row g-3 mb-3">
                <div class="col-md-4">
                    <label for="paymentDate" class="form-label">Payment Date</label>
                    <input type="date" class="form-control" id="paymentDate" name="paymentDate"/>
                </div>
                <div class="col-md-4">
                    <label for="createdAt" class="form-label">Created At</label>
                    <input type="date" class="form-control" id="createdAt" name="createdAt"/>
                </div>
                <div class="col-md-4">
                    <label for="updatedAt" class="form-label">Updated At</label>
                    <input type="date" class="form-control" id="updatedAt" name="updatedAt" />
                </div>
            </div>
            <div class="row g-3 mb-3">
                <div class="col-md-6">
                    <label for="customerName" class="form-label">Customer Name</label>
                    <input type="text" class="form-control" id="customerName" name="customerName" placeholder="Enter customer name"/>
                </div>
                <div class="col-md-6">
                    <label for="orderId" class="form-label">Order ID</label>
                    <input type="text" class="form-control" id="orderId" name="orderId" placeholder="Enter order ID" />
                </div>
            </div>
            <div class="row g-3 mb-3">
                <div class="col-md-6">
                    <label for="minAmount" class="form-label">Min Amount</label>
                    <input type="number" class="form-control" id="minAmount" name="minAmount" placeholder="0" />
                </div>
                <div class="col-md-6">
                    <label for="maxAmount" class="form-label">Max Amount</label>
                    <input type="number" class="form-control" id="maxAmount" name="maxAmount" placeholder="0" />
                </div>
            </div>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary">Search</button>
                <button type="reset" class="btn btn-secondary ms-2">Reset</button>
            </div>
        </form>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <table class="table table-striped table-bordered table-hover">
            <thead>
                <tr class="card-header">
                    <th class="card-title text-center">Method</th>
                    <th class="card-title text-center">Status</th>
                    <th class="card-title text-center">TransactionId</th>
                    <th class="card-title text-center">PaymentDate</th>
                    <th class="card-title text-center">CreatedAt</th>
                    <th class="card-title text-center">UpdatedAt</th>
                    <th class="card-title text-center">Customer</th>
                    <th class="card-title text-center">Total Amount Vat</th>
                    <th class="card-title text-center">Order</th>
                    <th class="card-title text-center"></th>
                </tr>
            </thead>
            <tbody class="tblPayment">
            </tbody>
        </table>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            loadData();

            $('#modalOrderSelect').change(function () {
                var selectedOrderId = +$(this).val();
                updateCustomerSelection(selectedOrderId, '#modalCustomerSelect');
            });

            var initialOrderId = +$('#modalOrderSelect').val();
            updateCustomerSelection(initialOrderId, '#modalCustomerSelect');            
        });

        function loadData() {
            let urlParams = new URLSearchParams(window.location.search);
            let query = [];
            urlParams.forEach((value, key) => {
                query.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);
            });
            
            query.forEach(val => {
                const [key, value] = val.split('=');
                $(`#${key}`).val(value);
            });

            $.ajax({
                url: `https://localhost:7176/api/Payments?${query.join('&')}`,
                type: "GET",
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('Authorization', 'Bearer @Context.Session.GetString("Token")');
                },
                success: function (result) {
                    // alert("Server response: ", result.message);
                    // console.log(result);

                    var html = "";
                    $.each(result.data, function (index, item) {
                        let editEnable = item.status === "Unpaid" ? '' : 'disabled';

                        html += '<tr>';
                        html += '<td>' + item.method + '</td>';
                        html += '<td>' + item.status + '</td>';
                        html += '<td>' + item.transactionId + '</td>';
                        html += '<td>' + item.paymentDate + '</td>';
                        html += '<td>' + item.createdAt + '</td>';
                        html += '<td>' + item.updatedAt + '</td>';
                        html += '<td>' + item.customer.name + '</td>';
                        html += '<td>' + item.order.totalAmountVat + '</td>';
                        html += '<td>' + item.orderId + '</td>';
                        html += '<td class="d-flex gap-1">' +
                            `<button class="btn btn-primary p-1 me-1 ${editEnable}" onclick="showUpdateModal(${item.paymentId})">Edit</button>` +
                            `<button class="btn btn-danger p-1 me-1" onclick="deletePayment(${item.paymentId})">Delete</button>` +
                            '</td>';
                        html += '</tr>';
                    });
                    $('.tblPayment').html(html);
                },
                error: function (xhr, error) {
                    alert(xhr.status, xhr.statusText);
                }
            });
        }

        function updateCustomerSelection(selectedOrderId, customerSelectId) {
            var orders = @Html.Raw(Json.Serialize(ViewBag.Orders));
            var selectedOrder = orders.find(order => order.orderId == selectedOrderId);

            if (selectedOrder) {
                var customerId = selectedOrder.customerId;
                $(customerSelectId).val(customerId);
            } else {
                $(customerSelectId).val('');
            }
        }

        function addPayment() {
            const payload = {
                paymentId: 0,
                orderId: $('#modalOrderSelect').val(),
                method: $('#modalMethod').val(),
                status: null,
                transactionId: null
            }

            $.ajax({
                url: 'https://localhost:7176/api/Payments',
                type: "POST",
                contentType: "application/json;charset=utf-8",
                data: JSON.stringify(payload),
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('Authorization', 'Bearer @Context.Session.GetString("Token")');
                },
                success: function (result) {
                    alert("Payment added successfully!");
                    loadData();
                    $('#paymentModal').modal('hide');
                },
                error: function (xhr, error) {
                    alert(xhr.statusText);
                }
            });
        }

        function updatePayment() {
            const payload = {
                paymentId: $('#updatePaymentId').val(),
                orderId: $('#updateOrderSelect').val(),
                method: $('#updateMethod').val(),
                status: $('#updateStatusSelect').val(),
                transactionId: $('#updateTransactionId').val()
            };

            $.ajax({
                url: 'https://localhost:7176/api/Payments/',
                type: "PUT",
                contentType: "application/json;charset=utf-8",
                data: JSON.stringify(payload),
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('Authorization', 'Bearer @Context.Session.GetString("Token")');
                },
                success: function (result) {
                    alert("Payment updated successfully!");
                    loadData();
                    $('#paymentUpdateModal').modal('hide');
                },
                error: function (xhr, error) {
                    alert(xhr.statusText);
                }
            });
        }

        function deletePayment(paymentId) {
            if (confirm("Are you sure you want to delete this payment?")) {
                $.ajax({
                    url: 'https://localhost:7176/api/Payments/' + paymentId,
                    type: "DELETE",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Authorization', 'Bearer @Context.Session.GetString("Token")');
                    },
                    success: function (result) {
                        alert("Payment deleted successfully!");
                        loadData();
                    },
                    error: function (xhr, error) {
                        alert(xhr.statusText);
                    }
                });
            }
        }

        function showModal() {
            $('#paymentModal').modal('show');
        }

        function showUpdateModal(paymentId) {
            $.ajax({
                url: 'https://localhost:7176/api/Payments/' + paymentId,
                type: "GET",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('Authorization', 'Bearer @Context.Session.GetString("Token")');
                },
                success: function (result) {
                    const data = result.data;
                    $('#updatePaymentId').val(data.paymentId);
                    $('#updateOrderSelect').val(data.orderId);
                    $('#updateCustomerSelect').val(data.customerId);
                    $('#updateStatusSelect').val(data.status);
                    $('#updateMethod').val(data.method);
                    $('#updateTransactionId').val(data.transactionId);
                    $('#paymentUpdateModal').modal('show');
                },
                error: function (xhr, error) {
                    alert(xhr.statusText);
                }
            });            
        }        
    </script>
}